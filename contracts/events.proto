syntax = "proto3";

option csharp_namespace = "RepoRunner.Contracts.Events";

package reporunner.events;

import "google/protobuf/timestamp.proto";

// Event messages for Redis Streams coordination between services

enum RunMode {
  RUN_MODE_UNSPECIFIED = 0;
  RUN_MODE_DOCKERFILE = 1;
  RUN_MODE_COMPOSE = 2;
}

message RunRequested {
  string run_id = 1;
  string repo_url = 2;
  string branch = 3;
  google.protobuf.Timestamp requested_at = 4;
  RunMode mode = 5;
  string compose_path = 6; // e.g., "docker-compose.yml" if mode is COMPOSE
  string primary_service = 7; // for COMPOSE mode
}

message ServiceInfo {
  string name = 1;
  string image_ref = 2;
  repeated int32 ports = 3;
  map<string, string> environment = 4;
}

message BuildSucceeded {
  string run_id = 1;
  string image_ref = 2; // for DOCKERFILE mode: single image
  repeated int32 ports = 3;
  google.protobuf.Timestamp completed_at = 4;
  string logs_ref = 5; // reference to build logs in Mongo
  RunMode mode = 6;
  repeated ServiceInfo services = 7; // for COMPOSE mode: multiple services
}

message BuildProgress {
  string run_id = 1;
  int32 current = 2;   // e.g., 3
  int32 total = 3;     // e.g., 6
  string service_name = 4; // current service being built
  google.protobuf.Timestamp timestamp = 5;
}

message BuildFailed {
  string run_id = 1;
  string error = 2;
  repeated string suggested_fixes = 3;
  google.protobuf.Timestamp failed_at = 4;
  string logs_ref = 5;
}

message RunSucceeded {
  string run_id = 1;
  string preview_url = 2;
  string namespace = 3;
  google.protobuf.Timestamp started_at = 4;
}

message RunFailed {
  string run_id = 1;
  string error = 2;
  google.protobuf.Timestamp failed_at = 3;
}

message RunStopRequested {
  string run_id = 1;
  string namespace = 2;
  google.protobuf.Timestamp requested_at = 3;
}

message IndexingComplete {
  string run_id = 1;
  string repo_id = 2;
  int32 doc_count = 3;
  google.protobuf.Timestamp completed_at = 4;
}
